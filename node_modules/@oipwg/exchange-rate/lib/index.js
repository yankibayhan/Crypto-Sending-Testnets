"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _insightExplorer = require("@oipwg/insight-explorer");

var _URLExplorer = _interopRequireDefault(require("./URLExplorer.js"));

var defaultCoins = {
  bitcoin: {
    usd: {
      url: 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
      transform: function transform(response) {
        if (response && response.bitcoin && response.bitcoin.usd) {
          return response.bitcoin.usd;
        }
      }
    }
  },
  litecoin: {
    usd: {
      url: 'https://api.coingecko.com/api/v3/simple/price?ids=litecoin&vs_currencies=usd',
      transform: function transform(response) {
        if (response && response.litecoin && response.litecoin.usd) {
          return response.litecoin.usd;
        }
      }
    }
  },
  flo: {
    usd: {
      url: 'https://api.coingecko.com/api/v3/simple/price?ids=flo&vs_currencies=usd',
      transform: function transform(response) {
        if (response && response.flo && response.flo.usd) {
          return response.flo.usd;
        }
      }
    }
  },
  raven: {
    usd: {
      url: 'https://api.coingecko.com/api/v3/simple/price?ids=ravencoin&vs_currencies=usd',
      transform: function transform(response) {
        if (response && response.ravencoin && response.ravencoin.usd) {
          return response.ravencoin.usd;
        }
      }
    }
  }
};
/**
 * @typedef {object} CoinObject
 * @property {string} CoinName - The string name for the coin
 * @property {FiatObject} CoinName.Fiat - Information about the Fiat to convert for the specific coin
 * @example
 * {
 *   'bitcoin': {
 *     'usd': {
 *       'url': 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
 *       'transform': function (response) {
 *         if (response && response.bitcoin && response.bitcoin.usd) {
 *           return response.bitcoin.usd
 *         }
 *       }
 *     }
 *   }
 * }
 */

/**
 * @typedef {object} FiatObject
 * @property {string} FiatType - The Fiat Type you are defining (i.e. "usd")
 * @property {string} [FiatType.url] - The URL to scrape for the Coin to Fiat conversion
 * @property {string} [FiatType.insight] - The Insight API server to scrape for the Coin to Fiat conversion
 * @property {function} [FiatType.transform] - A function that transforms the data response from the URL/Insight server to return the float conversion value
 * @example
 * {
 *   'usd': {
 *     'url': 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
 *     'transform': function (response) {
 *       if (response && response.bitcoin && response.bitcoin.usd) {
 *         return response.bitcoin.usd
 *       }
 *     }
 *   }
 * }
 */

var DEFAULT_TRANSFORM_FUNCTION = function DEFAULT_TRANSFORM_FUNCTION(response) {
  return response;
};

var aliases = {
  bitcoin: 'btc',
  litecoin: 'ltc',
  raven: 'rvn'
};
/** Calculate Exchange rates for Cryptocurrencies */

var Exchange = /*#__PURE__*/function () {
  /**
   * Create a new Exchange Rate checker
   * ##### Example
   * ```
   * import Exchange from 'oip-exchange-rate';
   *
   * let exchange = new Exchange();
   * ```
   * @param  {CoinObject} [coins] - Object containing CoinsObjects
   */
  function Exchange(coins) {
    (0, _classCallCheck2["default"])(this, Exchange);

    if (coins && (0, _typeof2["default"])(coins) === 'object') {
      // If we are defined, attempt to merge
      this.coins = Object.assign({}, defaultCoins, coins);
    } else {
      this.coins = defaultCoins;
    }

    this.explorers = {};
  }
  /**
   * @param  {string} coin - The string coin name (ex. "bitcoin")
   * @param  {string} fiat - The string fiat (ex. "usd")
   * @return {Promise<number>} Returns a Promise that will resolve to the number value of the exchange rate
   * @example <caption>Get the Exchange rate for USD per Bitcoin</caption>
   * import Exchange from 'oip-exchange-rate';
   *
   * let exchange = new Exchange();
   *
   * exchange.getExchangeRate("bitcoin", "usd").then((rate) => {
   *   console.log(rate);
   * })
   */


  (0, _createClass2["default"])(Exchange, [{
    key: "getExchangeRate",
    value: function () {
      var _getExchangeRate = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(coin, fiat) {
        var matchedTransform, c, fiatType, info, rate;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                matchedTransform = DEFAULT_TRANSFORM_FUNCTION;

                if (!(coin === fiat)) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", 1);

              case 3:
                _context.t0 = _regenerator["default"].keys(this.coins);

              case 4:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 29;
                  break;
                }

                c = _context.t1.value;

                if (Object.prototype.hasOwnProperty.call(this.coins, c)) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("continue", 4);

              case 8:
                if (!(c === coin || coin === aliases[c])) {
                  _context.next = 27;
                  break;
                }

                _context.t2 = _regenerator["default"].keys(this.coins[c]);

              case 10:
                if ((_context.t3 = _context.t2()).done) {
                  _context.next = 27;
                  break;
                }

                fiatType = _context.t3.value;

                if (Object.prototype.hasOwnProperty.call(this.coins[c], fiatType)) {
                  _context.next = 14;
                  break;
                }

                return _context.abrupt("continue", 10);

              case 14:
                if (!(fiatType === fiat)) {
                  _context.next = 25;
                  break;
                }

                if (!this.explorers[c]) {
                  this.explorers[c] = {};
                }

                if (!this.explorers[c][fiatType]) {
                  if (this.coins[c][fiatType].insight) {
                    this.explorers[c][fiatType] = new _insightExplorer.Insight(this.coins[c][fiatType].insight);
                  } else if (this.coins[c][fiatType].url) {
                    this.explorers[c][fiatType] = new _URLExplorer["default"](this.coins[c][fiatType].url, this.coins[c][fiatType].transform);
                  }
                }

                if (!this.explorers[c][fiatType]) {
                  _context.next = 25;
                  break;
                }

                matchedTransform = this.coins[c][fiatType].transform;
                _context.next = 21;
                return this.explorers[c][fiatType].getExchangeRate();

              case 21:
                info = _context.sent;
                rate = info;

                if (this.coins[c][fiatType].transform) {
                  rate = matchedTransform(info);
                }

                return _context.abrupt("return", rate);

              case 25:
                _context.next = 10;
                break;

              case 27:
                _context.next = 4;
                break;

              case 29:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getExchangeRate(_x, _x2) {
        return _getExchangeRate.apply(this, arguments);
      }

      return getExchangeRate;
    }()
  }]);
  return Exchange;
}();

module.exports = Exchange;